/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define L_BASE 0
#define L_SYMB 1
#define L_CODE 2
#define L_FNCT 3
#define L_MOVE 4
#define L_CNTR 5
#define L_KBRD 6

/ {
    macros {
    ZMK_MACRO(se_tilde,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RA(RBKT) &kp SPACE>;)
    ZMK_MACRO(se_tick,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp LS(EQUAL) &kp SPACE>;)
    ZMK_MACRO(se_circ,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp LS(RBKT) &kp SPACE>;)
    ZMK_MACRO(pr_stats,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp H &kp E &kp L &kp L &kp O>;)};
    behaviors {
        tu: hold_tap_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_STANDARD";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            global-quick-tap;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;};
        ht: hold_tap_standard {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_STANDARD";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;};
        ly: custom_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_LAYER_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;};
        td1: tap_dance1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&sl 1>, <&tog 1>;};
        tdte: tap_dance2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp TAB>, <&kp ESC>;};
        tdfn: tap_dance3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp F10>, <&kp F11>, <&kp F12>;};};
keymap { compatible = "zmk,keymap";
base_layer { bindings = <
// L_BASE
/*
#define L_SYMB 1 x
#define L_CODE 2 x
#define L_FNCT 3 o
#define L_MOVE 4 x
#define L_CNTR 5 x
#define L_KBRD 6
*/

&kp LGUI   &to L_FNCT  &kp C     &kp LBKT  &kp V     &kp Z               &kp X           &kp J      &kp P  &kp APOS  &kp Q   &to L_CNTR
&kp LCTRL  &kp A       &kp T     &kp N     &kp R     &kp B               &kp Y           &kp O      &kp S  &kp I     &kp O   &kp RET
&kp LALT   &kp D       &kp M     &kp U     &kp K     &kp W               &kp SEMI        &kp G      &kp F  &kp H     &kp L   &kp RALT 
                                 &kp BSPC  &kp LSFT  &ly L_CODE DEL      &ly L_SYMB ESC  &kp SPACE  &ly L_MOVE TAB
>;};
symbol_layer { bindings = <
// L_SYMB

&trans  &kp EQUAL   &kp RA(N7)  &kp LS(N8)     &kp RA(N8)    &kp LS(RBRC)       &kp RA(RBRC)  &kp RA(N9)  &kp LS(N9)    &kp RA(N0)     &kp LS(EQUAL)  &trans
&trans  &kp RA(N2)  &kp LS(N0)  &kp MINUS      &kp LS(NUHS)  &kp NUBS           &kp LS(NUBS)  &kp LS(N7)  &kp RA(NUBS)  &kp RA(MINUS)  &kp LS(N6)     &trans
&trans  &kp NUHS    &kp FSLH    &kp LS(COMMA)  &kp COMMA     &kp LS(MINUS)      &kp EXCL      &kp DOT     &kp LS(DOT)   &kp LS(FSLH)   &kp LS(N2)     &trans
                                  &trans         &trans        &trans             &trans        &trans      &trans
>;};
code_layer {  bindings = <
// L_CODE

&trans  &kp F1    &kp F2         &kp F3     &kp F4      &kp F5         &kp F6      &kp F7      &kp F8      &kp F9      &kp F10     &trans
&trans  &kp N1    &kp N2         &kp N3     &kp N4      &kp N5         &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &trans
&trans  &kp RBRC  &kp LS(GRAVE)  &kp GRAVE  &kp LS(N5)  &kp PSCRN      &kp LS(N4)  &kp LS(N3)  &kp RA(N4)  &kp RA(N3)  &kp RA(N5)  &trans
                                 &trans     &trans      &trans         &trans      &trans      &trans

>;};
function_layer { bindings = <
// L_FNCT

&trans  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15          &kp F16  &kp F17  &kp F18  &kp F19  &kp F20  &trans
&trans  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5           &kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &trans
&trans  &kp N1   &kp N2   &kp N3   &kp N4   &kp N5           &kp N6   &kp N7   &kp N8   &kp N9   &kp N0   &trans
                          &trans   &trans   &trans           &trans   &trans   &trans
>;};
move_layer { bindings = <
// L_MOVE

&trans  &none  &none  &none  &none  &none          &none     &kp HOME  &kp UP    &kp END    &none    &trans
&trans  &none  &none  &none  &none  &none          &kp PGUP  &kp LEFT  &kp DOWN  &kp RIGHT  &kp END  &trans
&trans  &none  &none  &none  &none  &none          &kp PGDN  &none     &kp PGDN  &none      &none    &trans
                      &trans &trans &trans         &trans    &trans    &trans

>;};
control_layer { bindings = <
// L_CNTR                       

&trans  &none  &none  &none   &none   &none      &none   &none   &none  &none  &to L_KBRD  &to L_BASE
&trans  &none  &none  &none   &none   &none      &none   &none   &none  &none  &none       &trans
&trans  &none  &none  &none   &none   &none      &none   &none   &none  &none  &none       &trans
                      &trans  &trans  &trans     &trans  &trans  &trans
>;};
keyboard_layer { bindings = <
// L_KBRD

&trans  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4          &bt BT_CLR  &none   &none  &none  &none  &to L_BASE
&trans  &none        &none        &none        &none        &none                 &none       &none   &none  &none  &none  &trans
&trans  &none        &none        &none        &none        &pr_stats             &none       &none   &none  &none  &none  &trans
                                  &trans       &trans       &trans                &trans      &trans  &trans
>;};};};